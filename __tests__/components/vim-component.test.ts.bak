/**
 * Tests for VimComponent
 * 
 * This file contains tests for the base VimComponent class that all
 * Vim UI components extend from in coc-vue.
 */

// Mock dependencies - must be before any imports that use them
jest.mock('coc.nvim', () => ({
  workspace: {
    nvim: {
      call: jest.fn().mockResolvedValue(1),
      command: jest.fn().mockResolvedValue(undefined),
      eval: jest.fn(),
      getOption: jest.fn().mockResolvedValue(100),
    },
  },
}));

// Mock the bridge/core module
jest.mock('../../src/bridge/core', () => ({
  bridgeCore: {
    sendMessage: jest.fn().mockResolvedValue(undefined),
    registerHandler: jest.fn(),
    unregisterHandler: jest.fn(),
  },
  MessageType: {
    ACTION: 'action',
    EVENT: 'event',
    RESPONSE: 'response',
    ERROR: 'error'
  }
}));

// Mock the reactivity module
jest.mock('../../src/reactivity/index', () => {
  // Create a simple reactive implementation for testing
  const reactiveObjects = new Map();
  
  const reactive = (obj) => {
    const proxy = { ...obj };
    reactiveObjects.set(proxy, obj);
    return proxy;
  };
  
  // Create a mock watch function that can be used to trigger updates in tests
  const mockWatchCallbacks = new Map();
  const watch = jest.fn((getter, callback) => {
    // Store the callback for later triggering
    mockWatchCallbacks.set(getter, callback);
    return jest.fn(); // Return a stop function
  });
  
  // Helper to manually trigger watch callbacks in tests
  (global as any).triggerWatch = (newVal: any, oldVal: any) => {
    mockWatchCallbacks.forEach((callback) => {
      callback(newVal, oldVal);
    });
  };
  
  return {
    reactive,
    effect: jest.fn((fn) => {
      fn();
      return jest.fn(); // Return a stop function
    }),
    ref: jest.fn((val) => ({ value: val })),
    watch
  };
});

// Import the component to test after mocks
import { VimComponent, ComponentOptions } from '../../src/components/vim-component';
import { bridgeCore, MessageType } from '../../src/bridge/core';

// Get the mocked coc module
const coc = jest.requireMock('coc.nvim');

describe('VimComponent', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  // INITIALIZATION TESTS
  describe('Initialization', () => {
    it('should initialize with the provided configuration', () => {
      // Arrange & Act
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        props: { title: 'Test Component' }
      });
      
      // Assert - Only test public properties
      expect(component).toBeDefined();
      expect(component.id).toBe('test-component');
      expect(component.type).toBe('test');
    });

    it('should register message handlers during initialization', () => {
      // Arrange & Act
      const component = new VimComponent({
        id: 'test-component',
        type: 'test'
      });
      
      // Assert
      expect(bridgeCore.registerHandler).toHaveBeenCalledWith(
        `component:${component.id}`,
        expect.any(Function)
      );
    });
  });

  // LIFECYCLE TESTS
  describe('Lifecycle Hooks', () => {
    it('should call lifecycle hooks in the correct order', async () => {
      // Arrange
      const beforeMount = jest.fn();
      const onMounted = jest.fn();
      const onUpdated = jest.fn();
      const onBeforeDestroy = jest.fn();
      const onDestroyed = jest.fn();
      
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        beforeMount,
        onMounted,
        onUpdated,
        onBeforeDestroy,
        onDestroyed
      });
      
      // Act - Mount the component
      await component.mount();
      
      // Assert - beforeMount and onMounted should be called
      expect(beforeMount).toHaveBeenCalled();
      expect(onMounted).toHaveBeenCalled();
      expect(onBeforeDestroy).not.toHaveBeenCalled();
      expect(onDestroyed).not.toHaveBeenCalled();
      
      // Act - Destroy the component
      await component.destroy();
      
      // Assert - onBeforeDestroy and onDestroyed should be called
      expect(onBeforeDestroy).toHaveBeenCalled();
      expect(onDestroyed).toHaveBeenCalled();
    });
    
    it('should handle missing lifecycle hooks gracefully', async () => {
      // Arrange - Component without lifecycle hooks
      const component = new VimComponent({
        id: 'test-component',
        type: 'test'
      });
      
      // Act & Assert - Should not throw errors
      await expect(component.mount()).resolves.not.toThrow();
      await expect(component.destroy()).resolves.not.toThrow();
    });
  });

  describe('Component Lifecycle', () => {
    it('should mount the component', async () => {
      // Arrange
      const beforeMountFn = jest.fn();
      const onMountedFn = jest.fn();
      
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        beforeMount: beforeMountFn,
        onMounted: onMountedFn
      });
      
      // Act
      await component.mount();
      
      // Assert
      expect(beforeMountFn).toHaveBeenCalled();
      expect(onMountedFn).toHaveBeenCalled();
      expect(component.isMounted).toBe(true);
      expect(bridgeCore.sendMessage).toHaveBeenCalledWith(expect.objectContaining({
        id: 'test-component',
        type: 'event',
        action: 'component:mounted'
      }));
    });
    
    it('should not mount if already mounted', async () => {
      // Arrange
      const onMountedFn = jest.fn();
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        onMounted: onMountedFn
      });
      
      // Act - Mount once
      await component.mount();
      
      // Reset mocks
      onMountedFn.mockClear();
      (bridgeCore.sendMessage as jest.Mock).mockClear();
      
      // Act - Try to mount again
      await component.mount();
      
      // Assert - Should not call hooks or send message again
      expect(onMountedFn).not.toHaveBeenCalled();
      expect(bridgeCore.sendMessage).not.toHaveBeenCalled();
    });
    
    it('should destroy the component', async () => {
      // Arrange
      const onBeforeDestroyFn = jest.fn();
      const onDestroyedFn = jest.fn();
      
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        onBeforeDestroy: onBeforeDestroyFn,
        onDestroyed: onDestroyedFn
      });
      
      // First mount it
      await component.mount();
      
      // Reset mocks
      (bridgeCore.sendMessage as jest.Mock).mockClear();
      
      // Act
      await component.destroy();
      
      // Assert
      expect(onBeforeDestroyFn).toHaveBeenCalled();
      expect(onDestroyedFn).toHaveBeenCalled();
      expect(component.isDestroyed).toBe(true);
      expect(component.isMounted).toBe(false);
      expect(bridgeCore.sendMessage).toHaveBeenCalledWith(expect.objectContaining({
        id: 'test-component',
        type: 'event',
        action: 'component:destroyed'
      }));
    });
    
    it('should not destroy if already destroyed', async () => {
      // Arrange
      const onDestroyedFn = jest.fn();
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        onDestroyed: onDestroyedFn
      });
      
      // First mount and destroy
      await component.mount();
      await component.destroy();
      
      // Reset mocks
      onDestroyedFn.mockClear();
      (bridgeCore.sendMessage as jest.Mock).mockClear();
      
      // Act - Try to destroy again
      await component.destroy();
      
      // Assert - Should not call hooks or send message again
      expect(onDestroyedFn).not.toHaveBeenCalled();
      expect(bridgeCore.sendMessage).not.toHaveBeenCalled();
    });
  });

  // METHOD TESTS
  describe('Method Handling', () => {
    it('should call a method on the component', async () => {
      // Arrange
      const testMethod = jest.fn().mockReturnValue('test-result');
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        methods: {
          testMethod
        }
      });
      
      // Act
      const result = await component.callMethod('testMethod', 'arg1', 'arg2');
      
      // Assert
      expect(testMethod).toHaveBeenCalledWith('arg1', 'arg2');
      expect(result).toBe('test-result');
    });
    
    it('should throw error when calling non-existent method', async () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        type: 'test'
      });
      
      // Act & Assert
      await expect(component.callMethod('nonExistentMethod')).rejects.toThrow(
        'Method nonExistentMethod not found'
      );
    });
    
    it('should throw error when calling method on destroyed component', async () => {
      // Arrange
      const testMethod = jest.fn();
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        methods: {
          testMethod
        }
      });
      
      // First mount and destroy
      await component.mount();
      await component.destroy();
      
      // Act & Assert
      await expect(component.callMethod('testMethod')).rejects.toThrow(
        'Cannot call method on destroyed component'
      );
    });
  });

  // STATE MANAGEMENT TESTS
  describe('State Management', () => {
    it('should update state', () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        state: { count: 0 }
      });
      
      // Act
      component.updateState({ count: 10 });
      
      // Assert - We can't directly test the internal state, but we can test the public getter
      expect(component.state.count).toBe(10);
    });
    
    it('should throw error when updating state of destroyed component', () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        state: { count: 0 }
      });
      
      // Mark component as destroyed
      component['_isDestroyed'] = true;
      
      // Act & Assert
      expect(() => component.updateState({ count: 10 })).toThrow(
        'Cannot update state of destroyed component'
      );
    });
    
    it('should update state with new properties', () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        state: {
          testProp: 'test-value'
        }
      });
      
      // Act
      component.updateState({
        testProp: 'updated-value',
        newProp: 'new-value'
      });
      
      // Assert
      expect(component.state.testProp).toBe('updated-value');
      expect(component.state.newProp).toBe('new-value');
    });
  });
  
  describe('Reactivity', () => {
    it('should set up computed properties', () => {
      // Arrange & Act
      const computedFn = jest.fn().mockReturnValue('computed-value');
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        computed: {
          testComputed: computedFn
        }
      });
      
      // Assert
      expect(component.state.testComputed).toBe('computed-value');
      expect(computedFn).toHaveBeenCalled();
    });
    
    it('should set up watchers', async () => {
      // Arrange
      const watchCallback = jest.fn();
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        state: {
          testValue: 'initial'
        },
        watch: {
          testValue: watchCallback
        }
      });
      
      // Act - Trigger the watch callback manually
      (global as any).triggerWatch('updated', 'initial');
      
      // Assert
      expect(watchCallback).toHaveBeenCalled();
    });
    
    it('should set up effect for rendering', () => {
      // Arrange
      const renderFn = jest.fn();
      
      // Mock the effect function to actually call the callback
      const mockEffect = jest.fn((fn) => {
        fn();
        return jest.fn();
      });
      
      // Replace the reactivity module's effect function temporarily
      const originalEffect = reactivityModule.effect;
      reactivityModule.effect = mockEffect;
      
      // Act - Create component which should trigger the effect
      const component = new VimComponent({
        id: 'test-component',
        render: renderFn
      });
      
      // Assert - The render function should be called
      expect(renderFn).toHaveBeenCalled();
      
      // Restore original effect function
      reactivityModule.effect = originalEffect;
    });  
      // Reset mocks
      onMountedFn.mockClear();
      (bridgeCore.sendMessage as jest.Mock).mockClear();
      
      // Act - Try to mount again
{{ ... }}
      
      // Assert - We can't directly test the internal state, but we can test the public getter
      expect(component.state.count).toBe(10);
    });
    
    it('should throw error when updating state of destroyed component', () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        state: {
          testProp: 'test-value'
        }
      });
      
      // Mark component as destroyed
      component['_isDestroyed'] = true;
      
      // Act & Assert
      expect(() => component.updateState({ count: 10 })).toThrow(
        'Cannot update state of destroyed component'
      );
    });
    
    it('should update state with new properties', () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        state: {
          testProp: 'test-value'
        }
      });
      
      // Act
      component.updateState({
        testProp: 'updated-value',
        newProp: 'new-value'
{{ ... }}
    
    it('should get nested property from object', () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component'
      });
      
      const obj = {
        a: {
          b: {
            c: 'value'
          }
        }
      };
      
      // Act & Assert
      expect(component['getNestedProperty'](obj, 'a.b.c')).toBe('value');
      expect(component['getNestedProperty'](obj, 'a.b')).toEqual({ c: 'value' });
      expect(component['getNestedProperty'](obj, 'a.nonexistent')).toBeUndefined();
      
      // Test with empty path - should return the original object
      const result = component['getNestedProperty'](obj, '');
      expect(result).toBe(obj);
    });
  });

  describe('Buffer Operations', () => {
    it('should create a buffer with the correct options', async () => {
{{ ... }}
      const component = new VimComponent({
        id: 'test-component',
        type: 'test',
        bufferOptions: {
          name: 'Test Buffer',
          filetype: 'test-filetype',
          buflisted: true,
          modifiable: true,
          readonly: false
        }
      });
      
      // Act
      await component.mount();
      
      // Assert
      expect(coc.workspace.nvim.call).toHaveBeenCalledWith('nvim_create_buf', [false, true]);
      expect(coc.workspace.nvim.call).toHaveBeenCalledWith('nvim_buf_set_name', [expect.anything(), 'Test Buffer']);
      expect(coc.workspace.nvim.command).toHaveBeenCalledWith(expect.stringContaining('filetype'));
      expect(coc.workspace.nvim.command).toHaveBeenCalledWith(expect.stringContaining('buflisted'));
      expect(coc.workspace.nvim.command).toHaveBeenCalledWith(expect.stringContaining('modifiable'));
      expect(coc.workspace.nvim.command).toHaveBeenCalledWith(expect.stringContaining('readonly'));
    });
    
    it('should create a buffer with floating position', async () => {
      // Arrange
      const component = new VimComponent({
        id: 'test-component',
        type: 'test'
      });
      
      // Act
      await component.mount();
      await component.destroy();
      
      // Assert
      expect(bridgeCore.unregisterHandler).toHaveBeenCalledWith(
        `component:${component.id}`,
        expect.any(Function)
      );
    });
  });
});
