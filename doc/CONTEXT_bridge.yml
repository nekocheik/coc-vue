file_name: CONTEXT_bridge
relative_path: /doc/CONTEXT_bridge.yml
priority: HIGH
tags:
  - Context
  - bridge
summary: This file contains sections from all documents related to the context 'bridge'.
sections:
  - title: "Overview"
    source_file: "BRIDGE_PROTOCOL"
    priority: "HIGH"
    tags:
      - "bridge"
      - "Protocol"
      - "Bridge"
    content: "Priority: HIGH
Tags: Protocol, Bridge

The Vue-to-Lua Bridge establishes a generic, component-agnostic communication layer between TypeScript running in COC.nvim and Lua executing in Neovim. This architectural approach creates a standardized foundation for component development that maintains clear separation between the communication mechanism and component-specific implementations. The protocol documentation details message formats, categorization, usage patterns, and implementation examples necessary for developers to create new components that leverage this bridge infrastructure."
  - title: "Testing"
    source_file: "BRIDGE_PROTOCOL"
    priority: "MEDIUM"
    tags:
      - "bridge"
      - "Testing"
      - "Verification"
    content: "Priority: MEDIUM
Tags: Testing, Verification

The bridge includes a built-in verification mechanism accessible through the ':CocCommand vue.bridge.test' command. This test sends a ping message from TypeScript to Lua and receives a pong response, demonstrating successful bidirectional communication. This simple verification ensures the basic communication infrastructure is functioning correctly and serves as a diagnostic tool for troubleshooting connectivity issues between the TypeScript and Lua environments."
  - title: "Debugging"
    source_file: "CONTEXT_documentation"
    priority: "MEDIUM"
    tags:
      - "bridge"
    content: "Priority: MEDIUM
Tags: documentation, Documentation
Source: README

Priority: MEDIUM Tags: Documentation
When troubleshooting, check Neovim errors using ':messages' to view error messages and ':CocOpenLog' to access the Coc.nvim log file. Common issues include component loading failures, port conflicts, asynchronous operation timeouts, and bridge communication breakdowns. Each problem has specific verification steps detailed in the troubleshooting guide."
  - title: "Architecture"
    source_file: "README"
    priority: "HIGH"
    tags:
      - "bridge"
      - "Architecture"
      - "Technical"
    content: "Priority: HIGH
Tags: Architecture, Technical

Built on a client-server architecture, the extension establishes bidirectional communication between TypeScript (Node.js) and Lua (Neovim). At its core, a robust bridge enables seamless inter-layer messaging through four key mechanisms: component lifecycle management, method invocation with argument passing, state synchronization, and event handling. The component-agnostic design employs dynamic method detection, automatic property mapping, flexible component discovery, and a unified API that eliminates hardcoded references."
  - title: "Debugging"
    source_file: "README"
    priority: "MEDIUM"
    tags:
      - "bridge"
      - "Documentation"
    content: "Priority: MEDIUM
Tags: Documentation

When troubleshooting, check Neovim errors using ':messages' to view error messages and ':CocOpenLog' to access the Coc.nvim log file. Common issues include component loading failures, port conflicts, asynchronous operation timeouts, and bridge communication breakdowns. Each problem has specific verification steps detailed in the troubleshooting guide."
