{
  "file_name": "CI_CD_INTEGRATION.md",
  "relative_path": "/docs/CI_CD_INTEGRATION.md",
  "tags": ["CI/CD", "Documentation", "DevOps"],
  "priority": "HIGH",
  "summary": "Comprehensive documentation on the Continuous Integration and Continuous Deployment configuration for the coc-vue project, including Docker environments, GitHub Actions workflows, test execution, and secret management.",
  "sections": [
    {
      "title": "Introduction",
      "priority": "MEDIUM",
      "tags": ["CI/CD", "Documentation"],
      "content": "The coc-vue project implements multiple continuous integration systems to maintain code quality and automate testing processes. These systems provide four key benefits: automated test execution triggered on each commit, verification of environment compatibility across different systems, comprehensive test report generation, and streamlined deployment of new versions. This infrastructure ensures consistent quality standards throughout the development lifecycle."
    },
    {
      "title": "Docker Environments",
      "priority": "HIGH",
      "tags": ["CI/CD", "Docker"],
      "content": "Docker creates isolated, reproducible test environments through four configuration components: the Dockerfile defining the test image, docker-compose.yml configuring services for different test types, docker-run-tests.sh script executing tests in containers, and setup-github-ci.sh script configuring GitHub integration. The Docker image builds on node:18-slim, installs essential dependencies (git, curl, lsof, procps), sets up the working directory, installs Node.js dependencies, copies source code, and makes scripts executable. Tests can be executed locally using either docker build/run commands or the dedicated run-docker-tests.sh script."
    },
    {
      "title": "GitHub Actions CI",
      "priority": "HIGH",
      "tags": ["CI/CD", "GitHub"],
      "content": "GitHub Actions automatically runs tests on every commit across all branches through a workflow defined in .github/workflows/test.yml. The workflow executes five sequential steps: checking out code, verifying Docker installation, building the Docker image, running tests in the container with environment variables (MOCK_NEOVIM, NODE_ENV, CI), and generating a test summary that displays either success or failure status with detailed logs. Configuration requires the workflow file and proper secret management through the setup-github-ci.sh script. Workflow monitoring is available through GitHub CLI commands for listing runs, viewing specific run details, and watching run progress in real-time."
    },
    {
      "title": "Jest Tests",
      "priority": "MEDIUM",
      "tags": ["Testing", "JavaScript"],
      "content": "Jest provides the framework for unit, component, and integration tests with three specialized execution commands. Unit tests target non-integration files with '--testPathPattern=\"__tests__/(?!integration)\"'. Component tests focus specifically on UI elements with '--testPathPattern=\"__tests__/components\"'. Integration tests verify cross-component functionality with '--testPathPattern=\"__tests__/integration\"'. All commands use a simplified Jest configuration and include '--passWithNoTests' to prevent pipeline failures when test files are absent."
    },
    {
      "title": "Vader Component Tests",
      "priority": "MEDIUM",
      "tags": ["Testing", "Vim"],
      "content": "Vader tests verify UI component behavior in Vim/Neovim environments. The tests reside in test/vader/ with .vader extension, structured as blocks defining setup, execution, and verification steps. The run-vader-tests.sh script executes these tests by starting Neovim in headless mode, loading the Vader plugin, running specified test files, generating JSON reports, and converting results to HTML format for improved readability. This framework is fully integrated into the CI pipeline for automated execution."
    },
    {
      "title": "Test Reports",
      "priority": "MEDIUM",
      "tags": ["Testing", "Documentation"],
      "content": "Comprehensive test reports are generated for both Jest and Vader tests, making them accessible in the CI pipeline. Jest reports include a JSON results file (jest-results.json) and a code coverage directory with detailed metrics on test coverage. Vader reports include a JSON results file (vader-results.json) and an HTML report (vader-report.html) that provides improved readability and visualization of test outcomes. These reports enable effective quality monitoring across the testing ecosystem."
    },
    {
      "title": "Secret Management",
      "priority": "CRITICAL",
      "tags": ["Security", "CI/CD"],
      "content": "The project implements secure secret handling practices for both local development and CI/CD processes. In local environments, sensitive information is stored in .env files excluded from version control via .gitignore, with example configurations provided in .env.example. For GitHub Actions, secrets are managed through GitHub's secure storage system with commands for adding and listing secrets. Five best practices are enforced: using environment variables for configuration, isolating secrets from code files, leveraging GitHub's secure storage, regularly rotating credentials, and verifying .gitignore patterns exclude sensitive files."
    },
    {
      "title": "Troubleshooting",
      "priority": "MEDIUM",
      "tags": ["CI/CD", "DevOps"],
      "content": "When encountering issues, specific troubleshooting approaches are available for different components. Docker problems can be diagnosed by checking daemon status, cleaning resources with system prune, and verifying port availability. GitHub CI issues can be addressed by confirming authentication status, checking workflow permissions, and validating workflow files. When tests fail in Docker but pass locally, four key areas should be examined: volume mounting in docker-compose.yml, environment variable configuration, test logs in the results directory, and rebuilding the Docker image without cache to eliminate potential corruption."
    }
  ]
}
