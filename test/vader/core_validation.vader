# Core Validation Module Tests
# This test file verifies the functionality of the core_validation module

# Test Environment Setup
Execute (Test Environment Setup):
  " Setup test environment
  lua << EOF
  -- Add the current directory to the package path
  local project_path = vim.fn.getcwd()
  package.path = project_path .. "/?.lua;" .. package.path
  vim.cmd("set runtimepath+=" .. project_path)
  
  -- Print timestamp for logging
  print("[" .. os.date("%Y-%m-%d %H:%M:%S") .. "] Starting core_validation tests")
  
  -- Verify module can be loaded
  local validation = require('vue-ui.core.core_validation')
  assert(validation ~= nil, "Failed to load core_validation module")
  
  -- Store values for Vader assertions
  vim.g.module_loaded = (validation ~= nil)
  EOF

  Assert module_loaded
    lua assert(vim.g.module_loaded)

# Basic Validation Tests
Execute (is_empty Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test nil value
  vim.g.nil_is_empty = validation.is_empty(nil)
  
  -- Test empty string
  vim.g.empty_string_is_empty = validation.is_empty("")
  
  -- Test non-empty string
  vim.g.non_empty_string_is_not_empty = not validation.is_empty("test")
  
  -- Test empty table
  vim.g.empty_table_is_empty = validation.is_empty({})
  
  -- Test non-empty table
  vim.g.non_empty_table_is_not_empty = not validation.is_empty({1, 2, 3})
  
  -- Test number (should not be empty)
  vim.g.number_is_not_empty = not validation.is_empty(0)
  EOF

  Assert nil_is_empty
    lua assert(vim.g.nil_is_empty)
  
  Assert empty_string_is_empty
    lua assert(vim.g.empty_string_is_empty)
  
  Assert non_empty_string_is_not_empty
    lua assert(vim.g.non_empty_string_is_not_empty)
  
  Assert empty_table_is_empty
    lua assert(vim.g.empty_table_is_empty)
  
  Assert non_empty_table_is_not_empty
    lua assert(vim.g.non_empty_table_is_not_empty)
  
  Assert number_is_not_empty
    lua assert(vim.g.number_is_not_empty)

Execute (validate_not_empty Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test valid value
  local result = validation.validate_not_empty("test", "Error message")
  vim.g.valid_value_returned = (result == "test")
  
  -- Test error handling with pcall
  local success, _ = pcall(function() validation.validate_not_empty(nil, "Value is empty") end)
  vim.g.error_thrown_for_nil = not success
  
  local success, _ = pcall(function() validation.validate_not_empty("", "String is empty") end)
  vim.g.error_thrown_for_empty_string = not success
  
  local success, _ = pcall(function() validation.validate_not_empty({}, "Table is empty") end)
  vim.g.error_thrown_for_empty_table = not success
  EOF

  Assert valid_value_returned
    lua assert(vim.g.valid_value_returned)
  
  Assert error_thrown_for_nil
    lua assert(vim.g.error_thrown_for_nil)
  
  Assert error_thrown_for_empty_string
    lua assert(vim.g.error_thrown_for_empty_string)
  
  Assert error_thrown_for_empty_table
    lua assert(vim.g.error_thrown_for_empty_table)

Execute (validate_table Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test valid table
  local result = validation.validate_table({}, "Error message")
  vim.g.valid_table_returned = (type(result) == "table")
  
  -- Test error handling with pcall
  local success, _ = pcall(function() validation.validate_table(nil, "Not a table") end)
  vim.g.error_thrown_for_nil = not success
  
  local success, _ = pcall(function() validation.validate_table("string", "Not a table") end)
  vim.g.error_thrown_for_string = not success
  
  local success, _ = pcall(function() validation.validate_table(123, "Not a table") end)
  vim.g.error_thrown_for_number = not success
  EOF

  Assert valid_table_returned
    lua assert(vim.g.valid_table_returned)
  
  Assert error_thrown_for_nil
    lua assert(vim.g.error_thrown_for_nil)
  
  Assert error_thrown_for_string
    lua assert(vim.g.error_thrown_for_string)
  
  Assert error_thrown_for_number
    lua assert(vim.g.error_thrown_for_number)

Execute (validate_table_optional Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test valid table
  local result = validation.validate_table_optional({}, "Error message")
  vim.g.valid_table_returned = (type(result) == "table")
  
  -- Test nil (should be valid)
  local result = validation.validate_table_optional(nil, "Error message")
  vim.g.nil_is_valid = (result == nil)
  
  -- Test error handling with pcall
  local success, _ = pcall(function() validation.validate_table_optional("string", "Not a table") end)
  vim.g.error_thrown_for_string = not success
  
  local success, _ = pcall(function() validation.validate_table_optional(123, "Not a table") end)
  vim.g.error_thrown_for_number = not success
  EOF

  Assert valid_table_returned
    lua assert(vim.g.valid_table_returned)
  
  Assert nil_is_valid
    lua assert(vim.g.nil_is_valid)
  
  Assert error_thrown_for_string
    lua assert(vim.g.error_thrown_for_string)
  
  Assert error_thrown_for_number
    lua assert(vim.g.error_thrown_for_number)

# Type Checking Tests
Execute (is_type Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test string type
  vim.g.string_is_string = validation.is_type("test", "string")
  vim.g.number_is_not_string = not validation.is_type(123, "string")
  
  -- Test number type
  vim.g.number_is_number = validation.is_type(123, "number")
  vim.g.string_is_not_number = not validation.is_type("123", "number")
  
  -- Test boolean type
  vim.g.boolean_is_boolean = validation.is_type(true, "boolean")
  vim.g.string_is_not_boolean = not validation.is_type("true", "boolean")
  
  -- Test table type
  vim.g.table_is_table = validation.is_type({}, "table")
  vim.g.string_is_not_table = not validation.is_type("table", "table")
  
  -- Test function type
  vim.g.function_is_function = validation.is_type(function() end, "function")
  vim.g.string_is_not_function = not validation.is_type("function", "function")
  
  -- Test array type
  vim.g.array_is_array = validation.is_type({1, 2, 3}, "array")
  vim.g.object_is_not_array = not validation.is_type({a = 1, b = 2}, "array")
  
  -- Test object type
  vim.g.object_is_object = validation.is_type({a = 1, b = 2}, "object")
  vim.g.array_is_not_object = not validation.is_type({1, 2, 3}, "object")
  EOF

  Assert string_is_string
    lua assert(vim.g.string_is_string)
  
  Assert number_is_not_string
    lua assert(vim.g.number_is_not_string)
  
  Assert number_is_number
    lua assert(vim.g.number_is_number)
  
  Assert string_is_not_number
    lua assert(vim.g.string_is_not_number)
  
  Assert boolean_is_boolean
    lua assert(vim.g.boolean_is_boolean)
  
  Assert string_is_not_boolean
    lua assert(vim.g.string_is_not_boolean)
  
  Assert table_is_table
    lua assert(vim.g.table_is_table)
  
  Assert string_is_not_table
    lua assert(vim.g.string_is_not_table)
  
  Assert function_is_function
    lua assert(vim.g.function_is_function)
  
  Assert string_is_not_function
    lua assert(vim.g.string_is_not_function)
  
  Assert array_is_array
    lua assert(vim.g.array_is_array)
  
  Assert object_is_not_array
    lua assert(vim.g.object_is_not_array)
  
  Assert object_is_object
    lua assert(vim.g.object_is_object)
  
  Assert array_is_not_object
    lua assert(vim.g.array_is_not_object)

Execute (is_array Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test valid arrays
  vim.g.empty_array_is_array = validation.is_array({})
  vim.g.sequential_array_is_array = validation.is_array({1, 2, 3})
  vim.g.mixed_array_is_array = validation.is_array({1, "two", true})
  
  -- Test invalid arrays
  vim.g.object_is_not_array = not validation.is_array({a = 1, b = 2})
  vim.g.non_sequential_is_not_array = not validation.is_array({[1] = "one", [3] = "three"})
  vim.g.string_is_not_array = not validation.is_array("not an array")
  vim.g.number_is_not_array = not validation.is_array(123)
  EOF

  Assert empty_array_is_array
    lua assert(vim.g.empty_array_is_array)
  
  Assert sequential_array_is_array
    lua assert(vim.g.sequential_array_is_array)
  
  Assert mixed_array_is_array
    lua assert(vim.g.mixed_array_is_array)
  
  Assert object_is_not_array
    lua assert(vim.g.object_is_not_array)
  
  Assert non_sequential_is_not_array
    lua assert(vim.g.non_sequential_is_not_array)
  
  Assert string_is_not_array
    lua assert(vim.g.string_is_not_array)
  
  Assert number_is_not_array
    lua assert(vim.g.number_is_not_array)

# Value Validation Tests
Execute (is_one_of Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test values in the list
  vim.g.value_in_list = validation.is_one_of("apple", {"apple", "banana", "orange"})
  vim.g.number_in_list = validation.is_one_of(2, {1, 2, 3})
  
  -- Test values not in the list
  vim.g.value_not_in_list = not validation.is_one_of("grape", {"apple", "banana", "orange"})
  vim.g.number_not_in_list = not validation.is_one_of(4, {1, 2, 3})
  EOF

  Assert value_in_list
    lua assert(vim.g.value_in_list)
  
  Assert number_in_list
    lua assert(vim.g.number_in_list)
  
  Assert value_not_in_list
    lua assert(vim.g.value_not_in_list)
  
  Assert number_not_in_list
    lua assert(vim.g.number_not_in_list)

Execute (validate_one_of Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test valid value
  local result = validation.validate_one_of("apple", {"apple", "banana", "orange"}, "Error message")
  vim.g.valid_value_returned = (result == "apple")
  
  -- Test error handling with pcall
  local success, _ = pcall(function() validation.validate_one_of("grape", {"apple", "banana", "orange"}, "Invalid value") end)
  vim.g.error_thrown_for_invalid_value = not success
  EOF

  Assert valid_value_returned
    lua assert(vim.g.valid_value_returned)
  
  Assert error_thrown_for_invalid_value
    lua assert(vim.g.error_thrown_for_invalid_value)

# Number Validation Tests
Execute (Number Validation Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- is_number tests
  vim.g.number_is_number = validation.is_number(123)
  vim.g.string_is_not_number = not validation.is_number("123")
  
  -- is_integer tests
  vim.g.integer_is_integer = validation.is_integer(123)
  vim.g.float_is_not_integer = not validation.is_integer(123.45)
  
  -- is_positive tests
  vim.g.positive_is_positive = validation.is_positive(123)
  vim.g.zero_is_not_positive = not validation.is_positive(0)
  vim.g.negative_is_not_positive = not validation.is_positive(-123)
  
  -- is_negative tests
  vim.g.negative_is_negative = validation.is_negative(-123)
  vim.g.zero_is_not_negative = not validation.is_negative(0)
  vim.g.positive_is_not_negative = not validation.is_negative(123)
  
  -- is_between tests
  vim.g.in_range_is_between = validation.is_between(5, 1, 10)
  vim.g.min_is_between = validation.is_between(1, 1, 10)
  vim.g.max_is_between = validation.is_between(10, 1, 10)
  vim.g.below_min_is_not_between = not validation.is_between(0, 1, 10)
  vim.g.above_max_is_not_between = not validation.is_between(11, 1, 10)
  EOF

  Assert number_is_number
    lua assert(vim.g.number_is_number)
  
  Assert string_is_not_number
    lua assert(vim.g.string_is_not_number)
  
  Assert integer_is_integer
    lua assert(vim.g.integer_is_integer)
  
  Assert float_is_not_integer
    lua assert(vim.g.float_is_not_integer)
  
  Assert positive_is_positive
    lua assert(vim.g.positive_is_positive)
  
  Assert zero_is_not_positive
    lua assert(vim.g.zero_is_not_positive)
  
  Assert negative_is_not_positive
    lua assert(vim.g.negative_is_not_positive)
  
  Assert negative_is_negative
    lua assert(vim.g.negative_is_negative)
  
  Assert zero_is_not_negative
    lua assert(vim.g.zero_is_not_negative)
  
  Assert positive_is_not_negative
    lua assert(vim.g.positive_is_not_negative)
  
  Assert in_range_is_between
    lua assert(vim.g.in_range_is_between)
  
  Assert min_is_between
    lua assert(vim.g.min_is_between)
  
  Assert max_is_between
    lua assert(vim.g.max_is_between)
  
  Assert below_min_is_not_between
    lua assert(vim.g.below_min_is_not_between)
  
  Assert above_max_is_not_between
    lua assert(vim.g.above_max_is_not_between)

# Pattern Matching Tests
Execute (Pattern Matching Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- matches_pattern tests
  vim.g.match_is_match = validation.matches_pattern("abc123", "^%a+%d+$")
  vim.g.non_match_is_not_match = not validation.matches_pattern("123abc", "^%a+%d+$")
  vim.g.number_is_not_match = not validation.matches_pattern(123, "^%d+$")
  
  -- is_valid_id tests
  vim.g.valid_id_is_valid = validation.is_valid_id("valid_id-123")
  vim.g.invalid_id_is_not_valid = not validation.is_valid_id("invalid id")
  vim.g.number_id_is_not_valid = not validation.is_valid_id(123)
  EOF

  Assert match_is_match
    lua assert(vim.g.match_is_match)
  
  Assert non_match_is_not_match
    lua assert(vim.g.non_match_is_not_match)
  
  Assert number_is_not_match
    lua assert(vim.g.number_is_not_match)
  
  Assert valid_id_is_valid
    lua assert(vim.g.valid_id_is_valid)
  
  Assert invalid_id_is_not_valid
    lua assert(vim.g.invalid_id_is_not_valid)
  
  Assert number_id_is_not_valid
    lua assert(vim.g.number_id_is_not_valid)

# Schema Validation Tests
Execute (Schema Validation Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Define a test schema
  local schema = {
    id = { required = true, type = "string", pattern = "^[a-zA-Z0-9_%-]+$" },
    name = { required = true, type = "string", minLength = 3 },
    age = { required = false, type = "number", min = 0, max = 120 },
    role = { required = false, type = "string", values = {"admin", "user", "guest"} },
    tags = { required = false, type = "array", minItems = 1 }
  }
  
  -- Test valid object
  local valid_obj = {
    id = "test-123",
    name = "Test User",
    age = 30,
    role = "admin",
    tags = {"test", "validation"}
  }
  
  local is_valid, _ = validation.validate_schema(valid_obj, schema)
  vim.g.valid_obj_is_valid = is_valid
  
  -- Test object with missing required field
  local missing_required = {
    id = "test-123",
    -- name is missing
    age = 30
  }
  
  local is_valid, _ = validation.validate_schema(missing_required, schema)
  vim.g.missing_required_is_not_valid = not is_valid
  
  -- Test object with invalid type
  local invalid_type = {
    id = "test-123",
    name = "Test User",
    age = "thirty" -- should be a number
  }
  
  local is_valid, _ = validation.validate_schema(invalid_type, schema)
  vim.g.invalid_type_is_not_valid = not is_valid
  
  -- Test object with invalid pattern
  local invalid_pattern = {
    id = "test 123", -- contains space
    name = "Test User"
  }
  
  local is_valid, _ = validation.validate_schema(invalid_pattern, schema)
  vim.g.invalid_pattern_is_not_valid = not is_valid
  
  -- Test object with invalid value
  local invalid_value = {
    id = "test-123",
    name = "Test User",
    role = "superadmin" -- not in allowed values
  }
  
  local is_valid, _ = validation.validate_schema(invalid_value, schema)
  vim.g.invalid_value_is_not_valid = not is_valid
  
  -- Test object with invalid min/max
  local invalid_range = {
    id = "test-123",
    name = "Test User",
    age = 150 -- above max
  }
  
  local is_valid, _ = validation.validate_schema(invalid_range, schema)
  vim.g.invalid_range_is_not_valid = not is_valid
  
  -- Test object with invalid minLength
  local invalid_length = {
    id = "test-123",
    name = "Te" -- too short
  }
  
  local is_valid, _ = validation.validate_schema(invalid_length, schema)
  vim.g.invalid_length_is_not_valid = not is_valid
  
  -- Test object with invalid minItems
  local invalid_items = {
    id = "test-123",
    name = "Test User",
    tags = {} -- empty array
  }
  
  local is_valid, _ = validation.validate_schema(invalid_items, schema)
  vim.g.invalid_items_is_not_valid = not is_valid
  EOF

  Assert valid_obj_is_valid
    lua assert(vim.g.valid_obj_is_valid)
  
  Assert missing_required_is_not_valid
    lua assert(vim.g.missing_required_is_not_valid)
  
  Assert invalid_type_is_not_valid
    lua assert(vim.g.invalid_type_is_not_valid)
  
  Assert invalid_pattern_is_not_valid
    lua assert(vim.g.invalid_pattern_is_not_valid)
  
  Assert invalid_value_is_not_valid
    lua assert(vim.g.invalid_value_is_not_valid)
  
  Assert invalid_range_is_not_valid
    lua assert(vim.g.invalid_range_is_not_valid)
  
  Assert invalid_length_is_not_valid
    lua assert(vim.g.invalid_length_is_not_valid)
  
  Assert invalid_items_is_not_valid
    lua assert(vim.g.invalid_items_is_not_valid)

# Component Validation Tests
Execute (Component Validation Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test validate_component_config
  local valid_config = {
    id = "test-123",
    title = "Test Component",
    width = 50
  }
  
  local result = validation.validate_component_config(valid_config, {"id", "title"}, "TestComponent")
  vim.g.valid_config_returned = (result == valid_config)
  
  -- Test error handling with pcall
  local success, _ = pcall(function() validation.validate_component_config(nil, {"id"}, "TestComponent") end)
  vim.g.error_thrown_for_nil_config = not success
  
  local success, _ = pcall(function() validation.validate_component_config({}, {"id"}, "TestComponent") end)
  vim.g.error_thrown_for_missing_required = not success
  
  -- Test validate_options
  local string_options = {"Option 1", "Option 2", "Option 3"}
  local validated_options = validation.validate_options(string_options)
  vim.g.string_options_converted = (validated_options[1].text == "Option 1" and validated_options[1].value == "Option 1")
  
  local object_options = {
    { id = "opt1", text = "Option 1", value = "value1" },
    { text = "Option 2", value = "value2" }, -- missing id
    { id = "opt3" } -- missing text and value
  }
  
  local validated_options = validation.validate_options(object_options)
  vim.g.missing_id_added = (validated_options[2].id == "2")
  vim.g.missing_text_added = (validated_options[3].text == "opt3")
  vim.g.missing_value_added = (validated_options[3].value == "opt3")
  
  -- Test with non-table
  local validated_options = validation.validate_options("not a table")
  vim.g.non_table_returns_empty = (#validated_options == 0)
  EOF

  Assert valid_config_returned
    lua assert(vim.g.valid_config_returned)
  
  Assert error_thrown_for_nil_config
    lua assert(vim.g.error_thrown_for_nil_config)
  
  Assert error_thrown_for_missing_required
    lua assert(vim.g.error_thrown_for_missing_required)
  
  Assert string_options_converted
    lua assert(vim.g.string_options_converted)
  
  Assert missing_id_added
    lua assert(vim.g.missing_id_added)
  
  Assert missing_text_added
    lua assert(vim.g.missing_text_added)
  
  Assert missing_value_added
    lua assert(vim.g.missing_value_added)
  
  Assert non_table_returns_empty
    lua assert(vim.g.non_table_returns_empty)

# Assert Function Tests
Execute (Assert Function Tests):
  lua << EOF
  local validation = require('vue-ui.core.core_validation')
  
  -- Test valid assertion
  local success, _ = pcall(function() validation.assert(true, "This should not error") end)
  vim.g.valid_assertion_succeeds = success
  
  -- Test invalid assertion
  local success, _ = pcall(function() validation.assert(false, "Assertion failed") end)
  vim.g.invalid_assertion_fails = not success
  
  -- Test with default error message
  local success, error_msg = pcall(function() validation.assert(false) end)
  vim.g.default_error_message_used = not success and error_msg:find("Assertion failed") ~= nil
  EOF

  Assert valid_assertion_succeeds
    lua assert(vim.g.valid_assertion_succeeds)
  
  Assert invalid_assertion_fails
    lua assert(vim.g.invalid_assertion_fails)
  
  Assert default_error_message_used
    lua assert(vim.g.default_error_message_used)

# Cleanup
Execute (Cleanup):
  lua << EOF
  -- Print timestamp for logging
  print("[" .. os.date("%Y-%m-%d %H:%M:%S") .. "] Completed core_validation tests")
  EOF
