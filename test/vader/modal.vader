# Modal Component Test
# This test file verifies the Modal component functionality

" Define global variable to store modal
let g:test_modal_id = 'test_modal_1'

# Component Creation
Execute (Create modal):
let g:test_modal = require('vue-ui').modal.create(g:test_modal_id, 'Test Modal', {
  title: 'Test Modal',
  content: "This is test content for the modal.",
  width: 60,
  height: 10
})

Then (Verify modal creation):
lua << EOF
local modal = require('vue-ui.utils.event_bridge').get_component(vim.g.test_modal_id)
assert(modal ~= nil, "Modal component was not created")
assert(modal.props.title == 'Test Modal', "Modal title does not match")
EOF

# Render Test
Execute (Modal rendering):
" Create temporary buffer for rendering
new
let g:test_buf = bufnr('%')

lua << EOF
-- Draw modal and store result in global variable
local modal = require('vue-ui.utils.event_bridge').get_component(vim.g.test_modal_id)
local render_result = modal:render()
assert(render_result ~= nil, "Modal rendering failed")
assert(#render_result.lines > 0, "Modal render contains no lines")

local render_text = table.concat(render_result.lines, '\n')
assert(render_text:find('Test Modal') ~= nil, "Render does not contain modal title")
assert(render_text:find('This is test content for the modal') ~= nil, "Render does not contain modal content")
EOF

bwipeout!

# Open/Close Test
Execute (Modal open/close):
" Simulate open modal for test
call g:test_modal.open()

Then (Verify modal is open):
lua << EOF
local modal = require('vue-ui.utils.event_bridge').get_component(vim.g.test_modal_id)
assert(modal.state.isOpen == true, "Modal is not open")
EOF

Execute (Close modal):
call g:test_modal.close()

Then (Verify modal is closed):
lua << EOF
local modal = require('vue-ui.utils.event_bridge').get_component(vim.g.test_modal_id)
assert(modal.state.isOpen == false, "Modal is not closed")
EOF

# Input Modal Test
Execute (Modal with input field):
" Create modal with input
let g:test_modal_input_id = 'test_modal_input_1'

lua << EOF
-- Store modal in global variable
_G.test_modal_input = require('vue-ui').modal.create(vim.g.test_modal_input_id, 'Modal with Input', {
  title: 'Input Test',
  content: 'Please enter your name:',
  input: {
    placeholder: 'Name',
    value: ''
  }
})

assert(require('vue-ui.utils.event_bridge').get_component(vim.g.test_modal_input_id) ~= nil, "Modal with input was not created")

-- Open modal
local open_result = _G.test_modal_input:open()
assert(open_result == true, "Opening modal with input failed")

-- Set input value
_G.test_modal_input:set_input_value('John Doe')
EOF

Then (Verify input value):
lua << EOF
assert(_G.test_modal_input.state.input.value == 'John Doe', "Input value was not set correctly")
EOF

Execute (Confirm modal with input):
lua << EOF
local confirm_result = _G.test_modal_input:confirm()
assert(confirm_result == true, "Modal confirmation with input failed")

-- Verify confirmation event with input was emitted
local events = require('vue-ui.utils.event_bridge')._get_events_for_test()
local found = false
for _, event in ipairs(events or {}) do
  if event.event == require('vue-ui.events.schema').EVENT_TYPES.MODAL_CONFIRMED and event.data.id == vim.g.test_modal_input_id then
    found = true
    break
  end
end
assert(found, "Confirmation event with input was not emitted correctly")
EOF

# Cleanup
Execute (Cleanup modal components):
call g:test_modal.destroy()
lua << EOF
local destroy_result = _G.test_modal_input:destroy()
assert(destroy_result == true, "Modal with input destruction failed")
assert(require('vue-ui.utils.event_bridge').get_component(vim.g.test_modal_input_id) == nil, "Modal with input was not removed from registry")
EOF
