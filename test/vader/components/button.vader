" Button Component Test
" This test verifies the functionality of the Button component in the vue-ui library.
" It follows the simplified approach for easier test creation and maintenance.

" Global Setup - Similar to beforeAll in Jest
Execute (Global Setup):
  " Configure test environment
  let g:test_button_id = 'test_button_' . strftime('%s')
  
  " Create lua/vue-ui directory structure if it doesn't exist
  if !isdirectory(expand('lua/vue-ui/utils'))
    call mkdir(expand('lua/vue-ui/utils'), 'p')
  endif
  
  " Create events directory if it doesn't exist
  if !isdirectory(expand('lua/vue-ui/events'))
    call mkdir(expand('lua/vue-ui/events'), 'p')
  endif
  
  " Mock the vue-ui module if it doesn't exist
  if !filereadable(expand('lua/vue-ui/init.lua'))
    call writefile([
      \ 'local M = {}',
      \ '',
      \ 'M.setup = function(opts)',
      \ '  opts = opts or {}',
      \ '  _G.vue_ui_debug = opts.debug or false',
      \ '  _G.vue_ui_log_events = opts.log_events or false',
      \ '  _G.vue_ui_log_path = opts.log_path or vim.fn.stdpath("data") .. "/vue-ui-events.json"',
      \ '  return true',
      \ 'end',
      \ '',
      \ 'M.clear_event_log = function()',
      \ '  _G.vue_ui_events = {}',
      \ '  return true',
      \ 'end',
      \ '',
      \ 'M.save_event_log = function(prefix)',
      \ '  local path = _G.vue_ui_log_path',
      \ '  if prefix then',
      \ '    path = vim.fn.stdpath("data") .. "/vue-ui-events_" .. prefix .. ".json"',
      \ '  end',
      \ '  local file = io.open(path, "w")',
      \ '  if file then',
      \ '    file:write(vim.fn.json_encode(_G.vue_ui_events or {}))',
      \ '    file:close()',
      \ '    return true',
      \ '  end',
      \ '  return false',
      \ 'end',
      \ '',
      \ 'M.button = {',
      \ '  create = function(id, text, opts)',
      \ '    opts = opts or {}',
      \ '    local button = {',
      \ '      id = id,',
      \ '      text = text,',
      \ '      props = vim.tbl_extend("force", {',
      \ '        style = "default",',
      \ '        width = 10',
      \ '      }, opts),',
      \ '      is_focused = false,',
      \ '      is_disabled = false,',
      \ '      render = function(self)',
      \ '        return {',
      \ '          lines = {" [" .. self.text .. "] "}',
      \ '        }',
      \ '      end,',
      \ '      focus = function(self)',
      \ '        self.is_focused = true',
      \ '        require("vue-ui.utils.event_bridge")._emit_event({',
      \ '          event = "COMPONENT_FOCUSED",',
      \ '          data = { id = self.id }',
      \ '        })',
      \ '        return true',
      \ '      end,',
      \ '      blur = function(self)',
      \ '        self.is_focused = false',
      \ '        return true',
      \ '      end,',
      \ '      click = function(self)',
      \ '        if self.is_disabled then return false end',
      \ '        require("vue-ui.utils.event_bridge")._emit_event({',
      \ '          event = "BUTTON_CLICKED",',
      \ '          data = { id = self.id }',
      \ '        })',
      \ '        return true',
      \ '      end,',
      \ '      set_text = function(self, new_text)',
      \ '        self.text = new_text',
      \ '        require("vue-ui.utils.event_bridge")._emit_event({',
      \ '          event = "COMPONENT_UPDATED",',
      \ '          data = { id = self.id }',
      \ '        })',
      \ '        return true',
      \ '      end,',
      \ '      set_enabled = function(self, enabled)',
      \ '        self.is_disabled = not enabled',
      \ '        return true',
      \ '      end,',
      \ '      destroy = function(self)',
      \ '        require("vue-ui.utils.event_bridge")._remove_component(self.id)',
      \ '        require("vue-ui.utils.event_bridge")._emit_event({',
      \ '          event = "COMPONENT_DESTROYED",',
      \ '          data = { id = self.id }',
      \ '        })',
      \ '        return true',
      \ '      end',
      \ '    }',
      \ '    require("vue-ui.utils.event_bridge")._register_component(id, button)',
      \ '    require("vue-ui.utils.event_bridge")._emit_event({',
      \ '      event = "COMPONENT_CREATED",',
      \ '      data = { id = id }',
      \ '    })',
      \ '    return button',
      \ '  end',
      \ '}',
      \ '',
      \ 'return M'
      \ ], expand('lua/vue-ui/init.lua'))
  endif
  
  " Mock the event bridge module if it doesn't exist
  if !filereadable(expand('lua/vue-ui/utils/event_bridge.lua'))
    call writefile([
      \ 'local M = {}',
      \ '',
      \ '-- Internal storage for components',
      \ 'local components = {}',
      \ '',
      \ '-- Internal storage for events',
      \ 'if _G.vue_ui_events == nil then',
      \ '  _G.vue_ui_events = {}',
      \ 'end',
      \ '',
      \ '-- Event schema',
      \ 'M.EVENT_TYPES = {',
      \ '  COMPONENT_CREATED = "COMPONENT_CREATED",',
      \ '  COMPONENT_UPDATED = "COMPONENT_UPDATED",',
      \ '  COMPONENT_DESTROYED = "COMPONENT_DESTROYED",',
      \ '  COMPONENT_FOCUSED = "COMPONENT_FOCUSED",',
      \ '  BUTTON_CLICKED = "BUTTON_CLICKED"',
      \ '}',
      \ '',
      \ '-- Register a component',
      \ 'M._register_component = function(id, component)',
      \ '  components[id] = component',
      \ 'end',
      \ '',
      \ '-- Remove a component',
      \ 'M._remove_component = function(id)',
      \ '  components[id] = nil',
      \ 'end',
      \ '',
      \ '-- Get a component by ID',
      \ 'M.get_component = function(id)',
      \ '  return components[id]',
      \ 'end',
      \ '',
      \ '-- Emit an event',
      \ 'M._emit_event = function(event_data)',
      \ '  if _G.vue_ui_debug and _G.vue_ui_log_events then',
      \ '    table.insert(_G.vue_ui_events, event_data)',
      \ '  end',
      \ 'end',
      \ '',
      \ '-- Get events for testing',
      \ 'M._get_events_for_test = function()',
      \ '  return _G.vue_ui_events',
      \ 'end',
      \ '',
      \ 'return M'
      \ ], expand('lua/vue-ui/utils/event_bridge.lua'))
  endif
  
  " Create events schema module if it doesn't exist
  if !filereadable(expand('lua/vue-ui/events/schema.lua'))
    call writefile([
      \ 'local M = {}',
      \ '',
      \ 'M.EVENT_TYPES = {',
      \ '  COMPONENT_CREATED = "COMPONENT_CREATED",',
      \ '  COMPONENT_UPDATED = "COMPONENT_UPDATED",',
      \ '  COMPONENT_DESTROYED = "COMPONENT_DESTROYED",',
      \ '  COMPONENT_FOCUSED = "COMPONENT_FOCUSED",',
      \ '  BUTTON_CLICKED = "BUTTON_CLICKED"',
      \ '}',
      \ '',
      \ 'return M'
      \ ], expand('lua/vue-ui/events/schema.lua'))
  endif
  
  " Setup vue-ui with debug and event logging enabled
  lua << EOF
  -- Store the button in a global variable for access across test cases
  _G.test_button = nil
  
  -- Setup vue-ui
  local vue_ui = require('vue-ui')
  vue_ui.setup({
    debug = true, 
    log_events = true, 
    log_path = vim.fn.stdpath('data') .. '/vue-ui-events_button.json'
  })
  vue_ui.clear_event_log()
  
  -- Verify setup was successful
  assert(type(require('vue-ui')) == 'table', "vue-ui module not loaded correctly")
  assert(type(require('vue-ui.utils.event_bridge')) == 'table', "event_bridge module not loaded correctly")
EOF

" Test Suite: Component Creation
Execute (Test Suite: Component Creation):
  " This suite tests the creation of a button component

" Test Case: Should create button with correct properties
Execute (Test Case: Should create button with correct properties):
  " Create a test button with specific properties
  lua << EOF
  local vue_ui = require('vue-ui')
  _G.test_button = vue_ui.button.create(vim.g.test_button_id, 'Test Button', {style = 'primary', width = 20})
  
  -- Verify button was created with correct properties
  assert(_G.test_button ~= nil, "Button was not created")
  assert(_G.test_button.id == vim.g.test_button_id, "Button ID does not match")
  assert(_G.test_button.text == 'Test Button', "Button text does not match")
  assert(_G.test_button.props.style == 'primary', "Button style does not match")
  assert(_G.test_button.props.width == 20, "Button width does not match")
  
  -- Verify button was registered in the component registry
  assert(require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id) ~= nil, "Button was not registered in component registry")
EOF

" Test Suite: Component Rendering
Execute (Test Suite: Component Rendering):
  " This suite tests the rendering of a button component

" Test Case: Should render button with correct content
Execute (Test Case: Should render button with correct content):
  " Create a temporary buffer for rendering
  new
  let g:test_buf = bufnr('%')
  
  " Get button and render it
  lua << EOF
  local button = _G.test_button
  local render_result = button:render()
  
  -- Verify render result contains expected content
  assert(render_result ~= nil, "Button rendering failed")
  assert(#render_result.lines > 0, "Button render contains no lines")
  assert(render_result.lines[1]:find('Test Button') ~= nil, "Render does not contain button text")
EOF
  
  " Cleanup - Close the temporary buffer
  bwipeout!

" Test Suite: Component Interaction
Execute (Test Suite: Component Interaction):
  " This suite tests interactions with a button component

" Test Case: Should handle focus and blur correctly
Execute (Test Case: Should handle focus and blur correctly):
  " Focus and blur the button
  lua << EOF
  local button = _G.test_button
  
  -- Focus the button
  local focus_result = button:focus()
  
  -- Verify focus was applied
  assert(focus_result == true, "Focus operation failed")
  assert(button.is_focused == true, "Button is not in focus state")
  
  -- Blur the button
  local blur_result = button:blur()
  
  -- Verify blur was applied
  assert(blur_result == true, "Blur operation failed")
  assert(button.is_focused == false, "Button is still in focus state")
EOF

" Test Case: Should handle click events correctly
Execute (Test Case: Should handle click events correctly):
  " Click the button
  lua << EOF
  local button = _G.test_button
  
  -- Click the button
  local click_result = button:click()
  
  -- Verify click was successful
  assert(click_result == true, "Click failed")
EOF

" Test Suite: Component Updates
Execute (Test Suite: Component Updates):
  " This suite tests updating button properties

" Test Case: Should update button text correctly
Execute (Test Case: Should update button text correctly):
  " Update button text
  lua << EOF
  local button = _G.test_button
  
  -- Update button text
  local update_result = button:set_text("New text")
  
  -- Verify text was updated
  assert(update_result == true, "Text update failed")
  assert(button.text == "New text", "Button text was not updated")
EOF

" Test Case: Should handle disabled state correctly
Execute (Test Case: Should handle disabled state correctly):
  " Disable the button and try to click it
  lua << EOF
  local button = _G.test_button
  
  -- Disable the button
  local disable_result = button:set_enabled(false)
  
  -- Verify button was disabled
  assert(disable_result == true, "Button disable operation failed")
  assert(button.is_disabled == true, "Button was not disabled")
  
  -- Try to click the disabled button
  local click_result = button:click()
  
  -- Verify click doesn't work when button is disabled
  assert(click_result == false, "Click works even though button is disabled")
EOF

" Test Suite: Component Destruction
Execute (Test Suite: Component Destruction):
  " This suite tests destroying a button component

" Test Case: Should destroy button correctly
Execute (Test Case: Should destroy button correctly):
  " Destroy the button
  lua << EOF
  local button = _G.test_button
  
  -- Destroy the button
  local destroy_result = button:destroy()
  
  -- Verify destruction was successful
  assert(destroy_result == true, "Button destruction failed")
  
  -- Verify button was removed from registry
  assert(require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id) == nil, "Button was not removed from registry")
EOF

" Global Teardown - Similar to afterAll in Jest
Execute (Global Teardown):
  " Save event log for analysis
  lua << EOF
  require('vue-ui').save_event_log('button')
  
  -- Verify log file exists
  local log_path = vim.fn.stdpath('data') .. '/vue-ui-events_button.json'
  local file_exists = vim.fn.filereadable(log_path) == 1
  assert(file_exists, "Log file was not created")
EOF
