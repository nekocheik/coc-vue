# Button Component Test
# This test file verifies the Button component functionality

# Configuration
Execute (Configuration):
  " Configure test environment
  let g:test_button_id = 'test_button_' . strftime('%s')
  lua require('vue-ui').setup({debug = true, log_events = true, log_path = vim.fn.stdpath('data') .. '/vue-ui-events_button.json'})
  lua require('vue-ui').clear_event_log()

# Component Creation
Execute (Button creation):
  " Create a test button
  lua local button = require('vue-ui').button.create(g:test_button_id, 'Test Button', {style = 'primary', width = 20})
  
  " Verify button was created
  lua assert(require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id) ~= nil, "Button was not created")
  
  " Verify creation event was emitted
  lua local events = require('vue-ui.utils.event_bridge')._get_events_for_test()
  lua local found = false
  lua for _, event in ipairs(events or {}) do
  lua   if event.event == require('vue-ui.events.schema').EVENT_TYPES.COMPONENT_CREATED and event.data.id == vim.g.test_button_id then
  lua     found = true
  lua     break
  lua   end
  lua end
  lua assert(found, "Creation event was not emitted")

# Render Test
Execute (Button rendering):
  " Create temporary buffer for rendering
  new
  let g:test_buf = bufnr('%')
  
  " Get button and render it
  lua local button = require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id)
  lua local render_result = button:render()
  lua assert(render_result ~= nil, "Button rendering failed")
  lua assert(#render_result.lines > 0, "Button render contains no lines")
  
  " Verify render contains button text
  lua assert(table.concat(render_result.lines, '\n'):find('Test Button') ~= nil, "Render does not contain button text")
  
  " Cleanup
  bwipeout!

# Focus Test
Execute (Button focus):
  " Get button
  lua local button = require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id)
  
  " Give focus to button
  lua local focus_result = button:focus()
  lua assert(focus_result == true, "Focus operation failed")
  lua assert(button.is_focused == true, "Button is not in focus state")
  
  " Verify focus event was emitted
  lua local events = require('vue-ui.utils.event_bridge')._get_events_for_test()
  lua local found = false
  lua for _, event in ipairs(events or {}) do
  lua   if event.event == require('vue-ui.events.schema').EVENT_TYPES.COMPONENT_FOCUSED and event.data.id == vim.g.test_button_id then
  lua     found = true
  lua     break
  lua   end
  lua end
  lua assert(found, "Focus event was not emitted")
  
  " Remove focus
  lua local blur_result = button:blur()
  lua assert(blur_result == true, "Blur operation failed")
  lua assert(button.is_focused == false, "Button is still in focus state")

# Click Test
Execute (Button click):
  " Get button
  lua local button = require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id)
  
  " Click the button
  lua local click_result = button:click()
  lua assert(click_result == true, "Click failed")
  
  " Verify click event was emitted
  lua local events = require('vue-ui.utils.event_bridge')._get_events_for_test()
  lua local found = false
  lua for _, event in ipairs(events or {}) do
  lua   if event.event == require('vue-ui.events.schema').EVENT_TYPES.BUTTON_CLICKED and event.data.id == vim.g.test_button_id then
  lua     found = true
  lua     break
  lua   end
  lua end
  lua assert(found, "Click event was not emitted")

# Update Test
Execute (Button update):
  " Get button
  lua local button = require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id)
  
  " Update button text
  lua local update_result = button:set_text("New text")
  lua assert(update_result == true, "Text update failed")
  lua assert(button.text == "New text", "Button text was not updated")
  
  " Verify update event was emitted
  lua local events = require('vue-ui.utils.event_bridge')._get_events_for_test()
  lua local found = false
  lua for _, event in ipairs(events or {}) do
  lua   if event.event == require('vue-ui.events.schema').EVENT_TYPES.COMPONENT_UPDATED and event.data.id == vim.g.test_button_id then
  lua     found = true
  lua     break
  lua   end
  lua end
  lua assert(found, "Update event was not emitted")
  
  " Disable button
  lua local disable_result = button:set_enabled(false)
  lua assert(disable_result == true, "Button disable operation failed")
  lua assert(button.is_disabled == true, "Button was not disabled")
  
  " Verify click doesn't work when button is disabled
  lua local click_result = button:click()
  lua assert(click_result == false, "Click works even though button is disabled")

# Destruction Test
Execute (Button destruction):
  " Get button
  lua local button = require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id)
  
  " Destroy button
  lua local destroy_result = button:destroy()
  lua assert(destroy_result == true, "Button destruction failed")
  
  " Verify button was removed from registry
  lua assert(require('vue-ui.utils.event_bridge').get_component(vim.g.test_button_id) == nil, "Button was not removed from registry")
  
  " Verify destruction event was emitted
  lua local events = require('vue-ui.utils.event_bridge')._get_events_for_test()
  lua local found = false
  lua for _, event in ipairs(events or {}) do
  lua   if event.event == require('vue-ui.events.schema').EVENT_TYPES.COMPONENT_DESTROYED and event.data.id == vim.g.test_button_id then
  lua     found = true
  lua     break
  lua   end
  lua end
  lua assert(found, "Destruction event was not emitted")

# Event Logging
Execute (Event logging):
  " Save event log
  lua require('vue-ui').save_event_log('button')
  
  " Verify log file exists
  lua local log_path = vim.fn.stdpath('data') .. '/vue-ui-events_button.json'
  lua assert(vim.fn.filereadable(log_path) == 1, "Log file was not created")
